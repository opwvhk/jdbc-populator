	---
	Introduction
	---
	Oscar Westra van Holthe - Kind
	---
	2012-04-04
	---

JDBC Populator: Introduction

  The JDBC populator is a library with one core interface: <<<net.sf.opk.populator.JDBCPopulator>>>,
  which in turn has a single method: <<<populateDatabase(java.sql.Connection)>>>. Its purpose is to populate a
  database just before it is used. As such, it can help to build an Instant Developer Experience.

  It also doubles as a {{{webfragment.html}JavaEE\ 6 web fragment}}, though this is deprecated and will be removed in
   the future.

  In order to make this all work, the library also contains several implementations of this interface, als also
  implementations of <<<javax.sql.DataSource>>> and <<<javax.sql.XADataSource>>>.

* Data Sources; GlassFish

  As an example says more than a long explanation, the following example is a <<<glassfish-resources.xml>>> file
  that defines both an XA and a non-XA data source, both of which use a <<<net.sf.opk.populator.JDBCPopulator>>> to
  fill their respective databases.

  There are examples the {{{other-containers.html}other containers}}.

+---
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE resources PUBLIC "-//GlassFish.org//DTD GlassFish Application Server 3.1 Resource Definitions//EN"
                "http://glassfish.org/dtds/glassfish-resources_1_5.dtd">
<resources>
    <!--
    Underlying Local DataSource
    -->
    <jdbc-connection-pool name="UnderlyingPool" datasource-classname="org.hsqldb.jdbc.JDBCDataSource"
                          non-transactional-connections="true">
        <property name="Url" value="jdbc:hsqldb:mem:MyApplicationDB"/>
        <property name="User" value="sa"/>
        <property name="Password" value=""/>
    </jdbc-connection-pool>
    <jdbc-resource pool-name="UnderlyingPool" jndi-name="jdbc/underlyingDataSource"/>

    <!--
    Underlying XA DataSource
    -->
    <jdbc-connection-pool name="UnderlyingPool" datasource-classname="org.hsqldb.jdbc.JDBCXADataSource"
                          non-transactional-connections="true">
        <property name="Url" value="jdbc:hsqldb:mem:MyApplicationDB"/>
        <property name="User" value="sa"/>
        <property name="Password" value=""/>
    </jdbc-connection-pool>
    <jdbc-resource pool-name="UnderlyingPool" jndi-name="jdbc/underlyingXADataSource"/>

    <!--
    JDBC Populator
    -->
    <custom-resource jndi-name="test/populator" res-type="net.sf.opk.populator.JDBCPopulator"
                     factory-class="net.sf.opk.populator.sql.SqlPopulatorFactory">
        <property name="sqlFile" value="src/main/config/database.sql"/>
    </custom-resource>

    <!--
    Local DataSource for use by your application
    -->
    <jdbc-connection-pool name="LocalPool" datasource-classname="net.sf.opk.populator.PopulatingDataSource"
                          connection-validation-method="meta-data" is-connection-validation-required="true">
        <property name="PopulatorName" value="test/populator"/>
        <property name="DelegateName" value="jdbc/underlyingDataSource"/>
    </jdbc-connection-pool>
    <jdbc-resource pool-name="LocalPool" jndi-name="jdbc/myApplicationDataSource"/>

    <!--
    XA DataSource for use by your application
    -->
    <jdbc-connection-pool name="LocalPool" datasource-classname="net.sf.opk.populator.PopulatingXADataSource"
                          connection-validation-method="meta-data" is-connection-validation-required="true">
        <property name="PopulatorName" value="test/populator"/>
        <property name="DelegateName" value="jdbc/underlyingXADataSource"/>
    </jdbc-connection-pool>
    <jdbc-resource pool-name="LocalPool" jndi-name="jdbc/myApplicationXADataSource"/>
</resources>
+---

  The <<<JDBCPopulator>>> is called upon first use of each data source.

  This enables the creation of an <Instant Developer Experience>, as a datasource for an in-memory database can be
  populated upon first use. This means that if you start the application, for example by using the
  {{{../embedded-glassfish-web-plugin/}Embedded GlassFish Web Plugin}}, your application will have data available.

  Additionally, the <<<JDBCPopulator>>> can also populate our EJB component tests. Using JavaEE 6, you can use:

+---
@DataSourceDefinition(name="java:global/MyApp/MyDataSource", ...)
public MyCodeTest
{
    @Resource(name = "java:global/MyApp/MyDataSource")
    DataSource datasource;

    @Before
    public void populateDatabase() throws SQLException, IOException
    {
        try (Connection connection = datasource.getConnection())
        {
            JDBCPopulator populator = new net.sf.opk.populator.sql.FileSqlPopulator("/path/to/file.sql");
            populator.populateDatabase(datasource.getConnection());
        }
    }
}
+---

* Conclusion

  The <<<JDBCPopulator>>> is a valuable asset during development, both for trying out an application and to test
  components contacting a database.
